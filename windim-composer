#!/usr/bin/env python3

import os
import argparse
import enum
import sys
import dataclasses
import functools
from typing import List, Tuple, Optional, Set, Dict, Union, Callable

WindowID = str

DEPENDENCIES_STACK_TRACE: List["DependencyStack"] = []
ARGS: argparse.Namespace
VARIABLES: Dict[str, int] = dict()
WINDOWS: Dict[WindowID, "Window"] = dict()


@dataclasses.dataclass
class DependencyStack:
    """
    Store the dependency stack trace
    """

    name: str
    reason: "InferringType"

    def __enter__(self):
        if self in DEPENDENCIES_STACK_TRACE:
            msg = (
                f" | > We want to computes "
                f"{format_stack_trace_msg(DEPENDENCIES_STACK_TRACE[0])}',\n"
            )
            for i in range(1, len(DEPENDENCIES_STACK_TRACE)):
                msg += (
                    f" | {'>' * (i + 1)} which wants "
                    f"{format_stack_trace_msg(DEPENDENCIES_STACK_TRACE[i])}'\n"
                )
            msg += (
                f" | {'>' * len(DEPENDENCIES_STACK_TRACE)} ...but "
                f"'{DEPENDENCIES_STACK_TRACE[-1].name}' "
                f"also wants {format_stack_trace_msg(self)}, "
                f"triggering recursion.\n"
            )

            exit_with_error_msg(
                f"Recursive dependencies detected.\n{msg}",
                exit_status=2,
            )

        DEPENDENCIES_STACK_TRACE.append(self)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        out = DEPENDENCIES_STACK_TRACE.pop(-1)
        assert out is self, f"logic error in dependency stack tracing"


def key_value_pair(string: str) -> Tuple[str, int]:
    """
    Validate a key value pair that is in the form of key=vale
    """
    key_value = string.split("=")
    if len(key_value) < 2:
        raise ValueError(
            "Must be in the form of key=value"
        )  # or TypeError, or `argparse.ArgumentTypeError
    return key_value[0], int("".join(key_value[1:]))


class InferringType(enum.Enum):
    top = enum.auto()
    bottom = enum.auto()
    left = enum.auto()
    right = enum.auto()

    def __str__(self):
        if self is InferringType.left:
            return "|<- left"
        if self is InferringType.right:
            return "->| right"
        if self is InferringType.top:
            return "^ top"
        if self is InferringType.bottom:
            return "v bottom"


############################################################


core_parser = argparse.ArgumentParser(
    prog="wmctrl_composer",
    description="What the program does",
    epilog="Full Usage:  "
    "wmctrl_composer [main_opts...] "
    "{Win1Name [Win1_opts...]} "
    "[Win2Name [Win2_opts...] Win3Name [Win3_opts...] ... ]",
)
core_parser.add_argument(
    "-a",
    "--auto-extend",
    action="store_true",
    help="for anything that cannot be "
    "inferred, automatically extend it to the max/min extend. "
    "Requires setting x_max, y_max",
)
core_parser.add_argument(
    "--draw",
    action="store_true",
    help="Draw out the composed output, instead of their numerical value.",
)
core_parser.add_argument(
    "--command-format",
    default="wmctrl -r {win_name} -e 0,{left},{top},{width},{height}",
)
core_parser.add_argument(
    "-X", "--x_max", type=int, help="maximum x dimension (right most coordinate)"
)
core_parser.add_argument(
    "-Y", "--y_max", type=int, help="maximum y dimension (bottom most coordinate)"
)
core_parser.add_argument(
    "-v", "--variable", type=key_value_pair, action="append", help="set custom variable"
)

############################################################


window_argument_parser = argparse.ArgumentParser(
    prog="WindowName",
    description="What the program does",
    epilog="Text at the bottom of help",
    add_help=False,
)
window_argument_parser.add_argument(
    "-a", "--alias", type=str, help="alias of the window"
)

window_argument_parser.add_argument("-w", "--width", type=int, help="window width")
window_argument_parser.add_argument("-h", "--height", type=int, help="window height")

window_argument_parser.add_argument(
    "-l", "--left-of", type=str, help="coordinate or name of another window"
)
window_argument_parser.add_argument(
    "-r", "--right-of", type=str, help="coordinate or name of another window"
)
window_argument_parser.add_argument(
    "-t", "--top-of", type=str, help="coordinate or name of another window"
)
window_argument_parser.add_argument(
    "-b", "--bottom-of", type=str, help="coordinate or name of another window"
)


############################################################


def exit_with_error_msg(msg: str, exit_status: int = 1):
    sys.stderr.write(f"> {msg}\n")
    sys.exit(exit_status)


def format_stack_trace_msg(requester: DependencyStack) -> str:
    return f"{requester.reason} of '{requester.name}"


def not_in_bound(val: int, max_val: Optional[int]) -> bool:
    if val < 0:
        return True
    if max_val is not None and val > max_val:
        return True
    return False


def slice_iterator(a_slice: slice, value_if_stop_is_none: int) -> range:
    _start = a_slice.start
    _stop = a_slice.stop
    if _start is None:
        _start = 0
    if _stop is None:
        _stop = value_if_stop_is_none
    assert a_slice.step is None
    return range(_start, _stop)


class Window:
    def __init__(
        self,
        name: str,
        args: argparse.Namespace,
    ):
        self.name = name
        self.args = args

        if not hasattr(self.__class__, "_instance_count"):
            self.__class__._instance_count = 0
        self.id = self.__class__._instance_count
        self.__class__._instance_count += 1

        error_msg_format = (
            "'{name}' provided all of {coord1}, {coord2} coordinates and window "
            "{dim}, which are incompatible due to how geometry works..."
        )
        if all(x is not None for x in (args.left_of, args.right_of, args.width)):
            exit_with_error_msg(
                error_msg_format.format(
                    name=name, coord1="left", coord2="right", dim="width"
                )
            )
        if all(x is not None for x in (args.top_of, args.bottom_of, args.height)):
            exit_with_error_msg(
                error_msg_format.format(
                    name=name, coord1="top", coord2="bottom", dim="height"
                )
            )

    @staticmethod
    def parse_coordinate(int_or_window_id: Optional[str]) -> Union[None, WindowID, int]:
        if int_or_window_id is None:
            return None
        try:
            return int(int_or_window_id)
        except ValueError:
            return str(int_or_window_id)

    def __infer_coordinate(
        self,
        infer_type: Callable[[argparse.Namespace], Optional[str]],
        infer_from_dependent_window: Callable[["Window"], int],
        infer_opposite_type: Callable[[argparse.Namespace], Optional[str]],
        infer_opposite_type_dependent_attr: Callable[
            [argparse.Namespace], Optional[int]
        ],
        infer_opposite_type_dependent_attr_unary_ops: Callable[[int], int],
        auto_extend_maybe_result: Callable[[], Optional[int]],
        inferring_type: InferringType,
    ) -> int:
        with DependencyStack(self.name, inferring_type) as _this_request:
            maybe_coordinate = self.parse_coordinate(infer_type(self.args))

            output = None
            if type(maybe_coordinate) == int:
                output = maybe_coordinate
            elif type(maybe_coordinate) == str:
                # get the x coordinate that this window depends on.
                if maybe_coordinate in WINDOWS:
                    output = infer_from_dependent_window(WINDOWS[maybe_coordinate])
                elif maybe_coordinate in VARIABLES:
                    return VARIABLES[maybe_coordinate]
                else:
                    exit_with_error_msg(
                        f"'{DEPENDENCIES_STACK_TRACE[-1].name}' depends on either a "
                        f"*variable* or *window* with id '{maybe_coordinate}', "
                        f"but it does not exists."
                    )

            elif (
                infer_opposite_type(self.args) is not None
                and infer_opposite_type_dependent_attr(self.args) is not None
            ):
                # try to infer from the other end
                output = infer_from_dependent_window(
                    self
                ) + infer_opposite_type_dependent_attr_unary_ops(
                    infer_opposite_type_dependent_attr(self.args)
                )

            elif ARGS.auto_extend:
                # if top/bottom/left/right was not able to automatically inferred, and
                # if we can extend them to edge of screen, then we will do that.

                # special handling case, where if we have provided height/width, then
                # we would always still try to utilise them in auto extend mode
                # THIS prioritises magnet stick top > bottom; and stick to left > right.
                if (
                    self.args.width is not None
                    and inferring_type is InferringType.right
                ):
                    output = self.left + self.args.width
                elif (
                    self.args.height is not None
                    and inferring_type is InferringType.bottom
                ):
                    output = self.top + self.args.height
                else:
                    output = auto_extend_maybe_result()
            if output is None:
                exit_with_error_msg(
                    f"{str(inferring_type).capitalize()} coordinate of '{self.name}' "
                    f"is needed, but it cannot be inferred.\n"
                )
        return output

    @functools.cached_property
    def left(self) -> int:
        return self.__infer_coordinate(
            infer_type=lambda x: x.left_of,
            infer_from_dependent_window=lambda x: x.right,
            infer_opposite_type=lambda x: x.right_of,
            infer_opposite_type_dependent_attr=lambda x: x.width,
            infer_opposite_type_dependent_attr_unary_ops=lambda x: -x,
            auto_extend_maybe_result=lambda: 0,
            inferring_type=InferringType.left,
        )

    @functools.cached_property
    def right(self) -> int:
        return self.__infer_coordinate(
            infer_type=lambda x: x.right_of,
            infer_from_dependent_window=lambda x: x.left,
            infer_opposite_type=lambda x: x.left_of,
            infer_opposite_type_dependent_attr=lambda x: x.width,
            infer_opposite_type_dependent_attr_unary_ops=lambda x: x,
            auto_extend_maybe_result=lambda: ARGS.x_max,
            inferring_type=InferringType.right,
        )

    @functools.cached_property
    def top(self) -> int:
        return self.__infer_coordinate(
            infer_type=lambda x: x.top_of,
            infer_from_dependent_window=lambda x: x.bottom,
            infer_opposite_type=lambda x: x.bottom_of,
            infer_opposite_type_dependent_attr=lambda x: x.height,
            infer_opposite_type_dependent_attr_unary_ops=lambda x: -x,
            auto_extend_maybe_result=lambda: 0,
            inferring_type=InferringType.top,
        )

    @functools.cached_property
    def bottom(self) -> int:
        return self.__infer_coordinate(
            infer_type=lambda x: x.bottom_of,
            infer_from_dependent_window=lambda x: x.top,
            infer_opposite_type=lambda x: x.top_of,
            infer_opposite_type_dependent_attr=lambda x: x.height,
            infer_opposite_type_dependent_attr_unary_ops=lambda x: x,
            auto_extend_maybe_result=lambda: ARGS.y_max,
            inferring_type=InferringType.bottom,
        )

    def check_dimension_validity(self) -> bool:
        return not any(
            [
                not_in_bound(self.left, ARGS.x_max),
                not_in_bound(self.right, ARGS.x_max),
                self.left >= self.right,
                not_in_bound(self.top, ARGS.y_max),
                not_in_bound(self.bottom, ARGS.y_max),
                self.top >= self.bottom,
            ]
        )

    def format_command(self) -> str:
        command = ARGS.command_format.format(
            win_name=self.name,
            left=self.left,
            top=self.top,
            width=self.right - self.left,
            height=self.bottom - self.top,
        )
        if not self.check_dimension_validity():
            exit_with_error_msg(
                f"command computed but it violates constrains: {command}"
            )

        return command

    def __repr__(self):
        return (
            f"{self.__class__.__name__}<{self.name}|"
            f"coord: ({self.left},{self.top}) "
            f"({self.right},{self.bottom})>"
        )


class WhiteBoard:
    def __init__(self, width, height, add_outer_boarder=True) -> None:
        print(width, height)
        self.rows = list(list(" " for _ in range(width)) for _ in range(height))
        print("width x height:", self.width, self.height)

        if add_outer_boarder:
            self[:, 0] = "|"
            self[:, -1] = "|"
            self[0, :] = "-"
            self[-1, :] = "-"

    @property
    def width(self) -> int:
        return len(self.rows[0])

    @property
    def height(self) -> int:
        return len(self.rows)

    def __setitem__(self, indices: tuple, value: str):
        assert isinstance(value, str)
        assert len(value) == 1

        if type(indices) is tuple:
            assert len(indices) == 2
            if type(indices[0]) is int and type(indices[1]) is slice:
                row_i = indices[0]
                for col_i in slice_iterator(indices[1], self.width):
                    self.rows[row_i][col_i] = value
            elif type(indices[0]) is slice and type(indices[1]) is int:
                col_i = indices[1]
                for row_i in slice_iterator(indices[0], self.height):
                    self.rows[row_i][col_i] = value
            elif type(indices[0]) is int and type(indices[1]) is int:
                self.rows[indices[0]][indices[1]] = value
            else:
                raise NotImplementedError()

    def print(self):
        for row in self.rows:
            print("".join(row))


class DrawingBoard:
    def __init__(
        self,
        monitor_xmax: int,
        monitor_ymax: int,
        drawing_width: Optional[int] = None,
    ):
        if drawing_width is None:
            term_size = os.get_terminal_size()
            drawing_width = term_size.columns

        self.real_x1 = monitor_xmax
        self.real_y1 = monitor_ymax

        self.x1 = drawing_width
        self.y1 = int(self.x_scale_factor * monitor_ymax)

        self.board = WhiteBoard(self.x1, self.y1)

    @functools.cached_property
    def x_scale_factor(self) -> float:
        return self.x1 / self.real_x1

    @functools.cached_property
    def y_scale_factor(self) -> float:
        return (self.y1) / self.real_y1

    def scale_x_dim(self, value: int) -> int:
        return min(int(value * self.x_scale_factor), self.x1 - 1)

    def scale_y_dim(self, value: int) -> int:
        return min(int(value * self.y_scale_factor), self.y1 - 1)

    def draw(self):
        self.board.print()

    def add_window(self, win: Window):
        _left = self.scale_x_dim(win.left)
        _right = self.scale_x_dim(win.right)
        _top = self.scale_y_dim(win.top)
        _bottom = self.scale_y_dim(win.bottom)

        symbol_string = "*#+x@%$&?^<>"
        symbol_i = win.id % (len(symbol_string) - 1)

        self.board[_top : _bottom + 1, _left] = symbol_string[symbol_i]
        self.board[_top : _bottom + 1, _right] = symbol_string[symbol_i]
        self.board[_top, _left : _right + 1] = symbol_string[symbol_i]
        self.board[_bottom, _left : _right + 1] = symbol_string[symbol_i]

        available_len_to_write = _right - _left - 1

        _name = win.name

        if len(_name) > available_len_to_write:
            if win.args.alias is not None and len(win.args.alias) < len(_name):
                _name = win.args.alias

        left_offset = (available_len_to_write - len(_name)) // 2
        for i, c in enumerate(_name):
            _board_i = _left + 1 + left_offset + i
            if _board_i < 0 or _board_i >= self.board.width:
                break
            # center align the window name
            self.board[(_bottom - _top) // 2 + _top, _board_i] = c


def draw_windows(windows: List[Window]):
    drawing_board = DrawingBoard(ARGS.x_max, ARGS.y_max)

    for i, win in enumerate(windows):
        drawing_board.add_window(win)
    drawing_board.draw()

    exit()


def collect_till_next_non_option_token(
    input_tokens: List[str],
    parser: argparse.ArgumentParser,
) -> Tuple[List[str], List[str]]:
    """
    Given a list of tokens and a corresponding parser (for the starting part of the
    tokens), return a list of tokens that are dedicated for the parser.

    We split by consuming tokens until the front-most token is a positional argument.
    Therefore, :parser: must only be parser that takes no positional args.

    :param input_tokens: Token to be processed
    :param parser: Parser for consuming the next N token
    :return: a list of N tokens for :parser:
    """
    tokens = []
    remaining_tokens = list(input_tokens)

    consume_next_n_token = 0
    while len(remaining_tokens):
        parsed_result = parser._parse_optional(remaining_tokens[0])
        # ic(remaining_tokens[0], parsed_result)
        if parsed_result is None:
            if consume_next_n_token > 0:
                # consumed by previous arg
                consume_next_n_token -= 1
                tokens.append(remaining_tokens.pop(0))
                continue
            break  # unknown option
        elif parsed_result[0] is None:
            # looks like an option but parser does not recognise it
            exit_with_error_msg(
                f"Token '{remaining_tokens[0]}' not recognised.\n\n{parser.format_help()}"
            )

        action, option_string, explicit_arg = parsed_result

        # # register actions
        # self.register('action', None, _StoreAction)
        # self.register('action', 'store', _StoreAction)
        # self.register('action', 'store_const', _StoreConstAction)
        # self.register('action', 'store_true', _StoreTrueAction)
        # self.register('action', 'store_false', _StoreFalseAction)
        # self.register('action', 'append', _AppendAction)
        # self.register('action', 'append_const', _AppendConstAction)
        # self.register('action', 'count', _CountAction)
        # self.register('action', 'parsers', _SubParsersAction)
        # self.register('action', 'extend', _ExtendAction)

        if isinstance(action, argparse._HelpAction):
            exit_with_error_msg(parser.format_help(), exit_status=2)
        elif isinstance(action, argparse._VersionAction):
            exit_with_error_msg(parser.format_help(), exit_status=2)
        elif isinstance(
            action,
            (argparse._StoreConstAction, argparse._StoreAction, argparse._AppendAction),
        ):
            consume_next_n_token = parser._match_argument(action, "A")
            if explicit_arg is not None:
                # assuming explicit_arg can only match exactly 1 arg
                consume_next_n_token -= 1

        else:
            raise RuntimeError(f"Action not implemented: {action}")
        tokens.append(remaining_tokens.pop(0))

    return tokens, remaining_tokens


def parse_args(input_args):
    global ARGS, VARIABLES, WINDOWS

    # parse from current to next non-option argument
    _core_input_args, remaining_args = collect_till_next_non_option_token(
        input_args, core_parser
    )
    ARGS = core_parser.parse_args(_core_input_args)

    ##############################################################################

    VARIABLES.update(
        {var[0]: var[1] for var in ARGS.variable} if ARGS.variable else dict()
    )

    windows_names = set()
    while len(remaining_args):
        windows_name = remaining_args.pop(0)
        _window_input_args, remaining_args = collect_till_next_non_option_token(
            remaining_args, window_argument_parser
        )
        _window_args = window_argument_parser.parse_args(_window_input_args)
        _window_args.name = windows_name
        if _window_args.name in windows_names:
            exit_with_error_msg(
                f"Window name cannot be duplicated: "
                f"conflicts on {_window_args.name}"
            )
            windows_names.add(_window_args.name)
        _alias = _window_args.name if _window_args.alias is None else _window_args.alias
        if _alias in VARIABLES:
            exit_with_error_msg(
                f"A variable with the id '{_alias}' conflicts with an existing window",
                exit_status=3,
            )
        if _alias in WINDOWS:
            exit_with_error_msg(f"Window '{_alias}' already exists.")
        WINDOWS[_alias] = Window(name=_window_args.name, args=_window_args)

    ####################################################################################

    if len(WINDOWS) < 1:
        exit_with_error_msg("No definition of window is given.")

    if ARGS.draw:
        draw_windows(list(WINDOWS.values()))
        raise NotImplementedError()
    else:
        for window_name, window in WINDOWS.items():
            print(window.format_command())


if __name__ == "__main__":
    parse_args(sys.argv[1:])
